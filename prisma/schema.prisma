// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(CUSTOMER)
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  services      Service[]
  customerBookings Booking[] @relation("CustomerBookings")
  providerBookings Booking[] @relation("ProviderBookings")
  reviews       Review[]
  availability  Availability[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String?
  duration    Int       // Duration in minutes
  price       Float
  provider    User      @relation(fields: [providerId], references: [id])
  providerId  String
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id          String   @id @default(cuid())
  startTime   DateTime
  endTime     DateTime
  status      String   @default("PENDING")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customerId  String
  customer    User     @relation("CustomerBookings", fields: [customerId], references: [id])
  providerId  String
  provider    User     @relation("ProviderBookings", fields: [providerId], references: [id])
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  reviews     Review[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookingId String   @unique
  booking   Booking  @relation(fields: [bookingId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Availability {
  id          String   @id @default(cuid())
  providerId  String
  provider    User     @relation(fields: [providerId], references: [id])
  dayOfWeek   Int      // 0-6 (Sunday-Saturday)
  startTime   DateTime
  endTime     DateTime
  isRecurring Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([providerId])
}

enum Role {
  CUSTOMER
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
